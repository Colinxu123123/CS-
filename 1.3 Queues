public void queueConcat(Queue<Object> o)
{
 while(o.peek()!= null)
 {
  this.add(o.remove());
 }
} // comes from 1.3, problem 47: Catenable Queues.

//3, Delete ith element: Create a data type that supports the following operations: isEmpty, insert, and remove(int i), 
where the deletion operation deletes and returns the ith least recently added object on the queue. Do it with an array, 
then do it with a linked list. What is the running time for each operation?//

public class IndexArray<T>
{
  Private T[] test;
  public indexArray(T[] test)
  {
   this.test=test;
  }
  
  public boolean isEmpty()
  {
   if(test[0]==null)
   {
    return true;
   }
   return false;
  }
  
  public void insert(T t)
  {
   int newLength = test.length+1;
   T[] new = new T[newLength];
   for(int i = 0; i<new.lenght; i++)
   {
    new[i]=test[i];
   }
   new[new.length-1]= t;
   test=new;
  }
  
  public <T> remove(int i)
  {
   int newLength = test.length-1;
   T ans = test[i];
   T[] new = new T[newLength];
   if(i>= test.length)
   {
     return "notAvaliableIndex";
   }
   else
   {
    for(int j=0; j < new.length;j++)
    {
     for(int k=0; k < test.length;k++)
     {
      if(j!= i)
      {
       new[j]= test[k];
      }
      else
      {
       k++;
       new[j]= test[k];
      }
     }
    }
    return ans;
   } 
  }
  
  
  public classs Node<T>
  {
    private Node<T> next;
    private T t;
    public Node(T t)
    {
     this.t=t;
     next=null;
    }
  }
  public class IndexLinkedList<T>
  {
    private Node<T> head;
    private Node<T> end;
    public IndexLinkedList()
    {
     head=null;
     end=null;
    }
    public boolean isEmpty()
    {
     return head == null;
    }
    
    public void add(T t)
    {
     Node<T> oldLast = last;
     last= new Node<T>(t);
     if(list.isEmpty())
     {
      first = last;
     }
     else
     {
      oldLast.next=last;
     }
    }
    
    public <T> remove(int i)
    {
     int j=0;
     Node<T> current = head;
     T ans = null;
     while(j < i-1 && current.next != null)
     {
      j++;
      current=current.next;
     }
     ans = current.next.item;
     current.next=current.next.next;
    }
    return ans;
  }
  
  // Compairing the above two classes during Running time. Foremost, using an array to meet the criteria of the quesiton(allowing
  array to remove data with indexs) is somewhat convoluted since arrays are immutable, and removing an index means you need to
  create a new array containing everything in the original array but the data in the designated index. Conversely, a linked list 
  is mutable, so the only thing I need to do is to find the correct "index" using a while loop and set the "next " pointer of the Node 
  before the designated index to the one after the desiganted index.// 
